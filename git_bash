
######################################################
# Git helper commands
######################################################

function gitN() {
    getLineGen gitC git "$@"
}

function gitUN() {
    getLineGen gitU $1 "${@:2}"
}

function getLineGen() {
    local display_cmd=$1
    local exec_cmd=$2
    if [ $# -lt 3 ]; then
        displayLine $display_cmd
    else
        local length="$(($#-3))"
        local cmd_args="${@:3:length}"
        local last_arg="${!#}"
        local ub=$last_arg
        local lb=$ub
        case $last_arg in
			"all")
				lb=1
				ub=$(displayLine $display_cmd | grep -e '^\s*[0-9]\+)' | tail -n 1 | awk '{print $1}' | tr -d ')')
				;;
            *\ * )
                read lb ub < <(echo $last_arg) 
        esac
        info_log "UB=$ub LB=$lb"
		for ((line_num=$ub; line_num>=$lb; line_num--)); do
            local line_name=$(getLine $display_cmd ${line_num})
            info_log "Executing $exec_cmd with arguments $cmd_args for $line_name"
            exec "$exec_cmd $cmd_args $line_name"
        done
        #lineSeparator
        #displayLine $display_cmd
    fi
}

function displayLineGen() {
    local length="$(($#-1))"
    local command=$1
    local line_num=$2
    getLineGen "$command" echo $line_num 
}

function gitBHN() {
    getLineGen gitBH "git checkout" "$@"
}

function gitRN() {
    getLineGen gitC gitR "$@"
}

function gitR() {
    local re='^[0-9]+$'
    local line_num="$1"
    local fileName
    [[ $line_num =~ $re ]] && fileName="$(gitFile $line_num)" || fileName=$line_num
    git diff "$fileName"
    info_log "Do you want to commit changes for $fileName (y/n), discard (d), or edit file (o)?"
    read accept
    if [ "$accept" == "y" ]; then
        git add "$fileName"
    elif [ "$accept" == "d" ]; then
		git checkout -- "$fileName"
	elif [ "$accept" == "o" ]; then
		vim "$fileName"
	fi
}

function gitFile() {
    echo "$(getLine gitC $1)"
}

function gitRecentFileChanges() {
    git log --name-status -$1 $2
}

######################################################
# Miscellaneous git helper commands
######################################################

function findN() {
    getLineGen "find . -iname $1" vim $2
}

function getLine() {
    local length="$(($#-1))"
    local command="${@:1:length}"
    local line_num="${!#}"
    LB=${LB:-"LAST"}
    UB=${UB:-"LAST"}
    displayLine "$command" | sed -n "${line_num}p" | awk -v lb=$LB -v ub=$UB '{ for(i=(lb=="LAST"?NF:lb); i<=(ub=="LAST"?NF:ub); i++) printf "%s",$i (i==NF?ORS:OFS) }'
}
function elc() {
    exec $LC
}

function storeCommand() {
    info_log "STORING COMMAND \"$*\""
    echo "LC=\"$*\"" > $HOME/.cli
    source ~/.cli
}

function lineSeparator() {
    echo
    echo =====================================================================================================================================
    echo
}

function displayLine() {
    exec "$@" |sed -e /^$/d | nl -s ') ' | more -F
    if [[ "$@" != "elc" ]]; then
        storeCommand $@
    fi
}


function gitC() {
     git status |awk '/Changes not staged for commit:|Unmerged paths:/,/Untracked files:/' | grep -o "them:.*\|us:.*\|deleted:.*\|modified:.*" | awk '{print $1"\t"$2}'
}

function gitU() {
     git status |awk '/nothing added to commit but untracked/{seen=0} seen{print $1} /what will be committed/{seen=1} '
}

function gitBH() {
    git reflog | grep checkout | awk '{print $NF}'
}

function exec() {
    $@
    local status=$?
    if [ $status -ne 0 ]; then
        error_log "Failed executing $1. Exit code $status"
        kill -INT $$
    fi
}

function info_log() {
    echo "[INFO] $1"
}

function error_log() {
    echo "[ERROR] $1"
}
